<metro:MetroWindow x:Class="WndTop.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:WndTop"
        xmlns:materialDesign="http://materialdesigninxaml.net/winfx/xaml/themes"
        xmlns:metro="http://metro.mahapps.com/winfx/xaml/controls"
        mc:Ignorable="d"
        Title="MainWindow" Height="201.218" Width="309.079" WindowStartupLocation="CenterScreen"
        BorderBrush="{DynamicResource AccentColorBrush}"
        BorderThickness="1"
                   
        TextElement.Foreground="{DynamicResource MaterialDesignBody}"
        TextElement.FontWeight="Regular"
        TextElement.FontSize="13"
        TextOptions.TextFormattingMode="Ideal" 
        TextOptions.TextRenderingMode="Auto"        
        Background="{DynamicResource MaterialDesignPaper}"
        FontFamily="{DynamicResource MaterialDesignFont}"
        >
    <Grid>


        <ToggleButton
                        
                          ToolTip="MaterialDesignActionLightToggleButton"
                          IsChecked="True" Margin="33,42,226,87"
                   BorderBrush="Black"
                      >

            <ToggleButton.Style>
                <Style TargetType="ToggleButton" BasedOn="{StaticResource MaterialDesignFlatPrimaryToggleButton}">
                    <Setter Property="Template">
                        <Setter.Value>
                            <ControlTemplate TargetType="{x:Type ToggleButton}">
                                <Grid ClipToBounds="True" Width="{TemplateBinding Width}" Height="{TemplateBinding Height}">
                                    <VisualStateManager.VisualStateGroups>
                                        <VisualStateGroup x:Name="CommonStates">
                                            <VisualState x:Name="Normal"/>
                                            <VisualState x:Name="Disabled">
                                                <Storyboard>
                                                    <DoubleAnimation Duration="0" To="0.23" Storyboard.TargetProperty="(UIElement.Opacity)" />
                                                </Storyboard>
                                            </VisualState>
                                        </VisualStateGroup>
                                        <VisualStateGroup x:Name="CheckStates">
                                            <VisualStateGroup.Transitions>
                                                <VisualTransition From="*" To="Checked">
                                                    <Storyboard>
                                                        <DoubleAnimationUsingKeyFrames Duration="0:0:0.2" Storyboard.TargetProperty="ScaleX" Storyboard.TargetName="CheckedEllipseScale">
                                                            <LinearDoubleKeyFrame Value="0" KeyTime="0:0:0.0" />
                                                            <LinearDoubleKeyFrame Value="1.0" KeyTime="0:0:0.1" />
                                                        </DoubleAnimationUsingKeyFrames>
                                                        <DoubleAnimationUsingKeyFrames Duration="0:0:0.2" Storyboard.TargetProperty="ScaleY" Storyboard.TargetName="CheckedEllipseScale">
                                                            <LinearDoubleKeyFrame Value="0" KeyTime="0:0:0.0" />
                                                            <LinearDoubleKeyFrame Value="1.0" KeyTime="0:0:0.1" />
                                                        </DoubleAnimationUsingKeyFrames>
                                                    </Storyboard>
                                                </VisualTransition>
                                                <VisualTransition From="Checked" To="Unchecked">
                                                    <Storyboard>
                                                        <DoubleAnimationUsingKeyFrames Duration="0:0:0.2" Storyboard.TargetProperty="ScaleX" Storyboard.TargetName="CheckedEllipseScale">
                                                            <LinearDoubleKeyFrame Value="1.0" KeyTime="0:0:0.0" />
                                                            <LinearDoubleKeyFrame Value="0" KeyTime="0:0:0.1" />
                                                        </DoubleAnimationUsingKeyFrames>
                                                        <DoubleAnimationUsingKeyFrames Duration="0:0:0.2" Storyboard.TargetProperty="ScaleY" Storyboard.TargetName="CheckedEllipseScale">
                                                            <LinearDoubleKeyFrame Value="1.0" KeyTime="0:0:0.0" />
                                                            <LinearDoubleKeyFrame Value="0" KeyTime="0:0:0.1" />
                                                        </DoubleAnimationUsingKeyFrames>
                                                    </Storyboard>
                                                </VisualTransition>
                                            </VisualStateGroup.Transitions>
                                            <VisualState x:Name="Checked">
                                                <Storyboard>
                                                    <DoubleAnimation Duration="0" Storyboard.TargetProperty="ScaleX" Storyboard.TargetName="CheckedEllipseScale" To="1.0" />
                                                    <DoubleAnimation Duration="0" Storyboard.TargetProperty="ScaleY" Storyboard.TargetName="CheckedEllipseScale" To="1.0" />
                                                </Storyboard>
                                            </VisualState>
                                            <VisualState x:Name="Unchecked">
                                                <Storyboard>
                                                    <DoubleAnimation Duration="0" Storyboard.TargetProperty="ScaleX" Storyboard.TargetName="CheckedEllipseScale" To="0" />
                                                    <DoubleAnimation Duration="0" Storyboard.TargetProperty="ScaleY" Storyboard.TargetName="CheckedEllipseScale" To="0" />
                                                </Storyboard>
                                            </VisualState>
                                        </VisualStateGroup>
                                    </VisualStateManager.VisualStateGroups>
                                    <Ellipse Fill="Transparent" x:Name="HoverEllipse" Stroke="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Background}" StrokeThickness="1" />
                                    <Ellipse Fill="{TemplateBinding Background}" x:Name="CheckedEllipse" RenderTransformOrigin="0.5, 0.5">
                                        <Ellipse.RenderTransform>
                                            <ScaleTransform CenterX="0.5" CenterY="0.5" ScaleX="1.0" ScaleY="1.0" x:Name="CheckedEllipseScale"/>
                                        </Ellipse.RenderTransform>
                                    </Ellipse>
                                    <ContentPresenter x:Name="contentPresenter" ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                                </Grid>
                                <ControlTemplate.Triggers>
                                    <!--<Trigger Property="IsMouseOver" Value="true">
                                        <Setter Property="Stroke" TargetName="HoverEllipse" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Background}" />
                                    </Trigger>-->
                                    <!-- TODO
						<Trigger Property="IsFocused" Value="True">
							<Setter Property="BorderBrush" TargetName="normal" Value="{Binding (Custom:ControlsHelper.FocusBorderBrush), RelativeSource={RelativeSource TemplatedParent}}"/>
						</Trigger>
						-->
                                </ControlTemplate.Triggers>
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                </Style>
            </ToggleButton.Style>
            <materialDesign:PackIcon Kind="Pin" Height="21" Width="21" RenderTransformOrigin=".5,.5">
                <materialDesign:PackIcon.RenderTransform>
                    <RotateTransform Angle="45"/>
                </materialDesign:PackIcon.RenderTransform>
            </materialDesign:PackIcon>
            <materialDesign:ToggleButtonAssist.OnContent>
                <materialDesign:PackIcon Kind="Pin"/>
            </materialDesign:ToggleButtonAssist.OnContent>

        </ToggleButton>

        <ToggleButton Style="{StaticResource MaterialDesignFlatPrimaryToggleButton}"
                        
                          ToolTip="MaterialDesignActionLightToggleButton"
                          IsChecked="False" Margin="195,42,64,87"
                   
                      >
            <materialDesign:PackIcon Kind="Pin" Height="21" Width="21" RenderTransformOrigin=".5,.5">
                <materialDesign:PackIcon.RenderTransform>
                    <RotateTransform Angle="90"/>
                </materialDesign:PackIcon.RenderTransform>
            </materialDesign:PackIcon>
            <materialDesign:ToggleButtonAssist.OnContent>
                <materialDesign:PackIcon Kind="Pin"/>
            </materialDesign:ToggleButtonAssist.OnContent>

        </ToggleButton>
        <Button x:Name="button" Content="Button" HorizontalAlignment="Left" VerticalAlignment="Top" Width="75" Margin="48,111,0,0"
                >
            <Button.Style >
                <Style TargetType="Button"  BasedOn="{StaticResource MaterialDesignRaisedLightButton}">

                </Style>
            </Button.Style>
        </Button>
        <ToggleButton Style="{StaticResource MaterialDesignActionToggleButton}"
                          ToolTip="MaterialDesignActionLightToggleButton">
            <ToggleButton.Content>
                <materialDesign:PackIcon Kind="Pin" Width="14" Height="14" RenderTransformOrigin=".5,.5" />
            </ToggleButton.Content>

        </ToggleButton>
    </Grid>
</metro:MetroWindow>
